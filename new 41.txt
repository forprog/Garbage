Функция КартаСубконто(СчетГруппа, НомераИспользуемыхСубконтоСчетаГруппы, Субсчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субсчета",   Субсчета);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто1,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто2,
	// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
	//|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто3
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто3,
	|	ЕСТЬNULL(ВидыСубконто4.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто4
	// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто4
	|		ПО Хозрасчетный.Ссылка = ВидыСубконто4.Ссылка
	|			И (ВидыСубконто4.НомерСтроки = 4)
	// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
	|ГДЕ
	|	Хозрасчетный.Ссылка В (&Субсчета)";
	
	СвойстваСчетов = Запрос.Выполнить().Выгрузить();

	// Определим позиции поля субконто в запросе к виртуальной таблице для субконто каждого субсчета.
	// Например, в оборотах счета по 76 выбрана группировка только по договорам, номер субконто Договоры на счете 76 = 2.
	// В параметре &ВидыСубконто виртуальной таблицы ОстаткиИОбороты() нужно передать только один элемент ПВХ.ВидыСубконтоХозрасчетные.Договоры.
	// Поэтому в запросе договор будет доступно как поле Субконто1.
	// Чтобы оно правильно сопоставилось с полем договоры в настройках СКД, в запросе потребуется заменить его псевдоним:
	//      Субконто1 КАК Субконто2

	ОписаниеТиповЧисло       = ОбщегоНазначения.ОписаниеТипаЧисло(2);
	ОписаниеТиповВидСубконто = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	ДетальнаяКартаСубконто = Новый ТаблицаЗначений;
	ДетальнаяКартаСубконто.Колонки.Добавить("Счет",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	// Виды субконто, которые передаются в параметр &ВидыСубконто виртуальной таблицы.
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто1", ОписаниеТиповВидСубконто);
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто2", ОписаниеТиповВидСубконто);
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто3", ОписаниеТиповВидСубконто);
	// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
	ДетальнаяКартаСубконто.Колонки.Добавить("ВидСубконто4", ОписаниеТиповВидСубконто);
	// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
	// Содержат номер псевдонима (КАК Субконто1, КАК Субконто2, КАК Субконто3) для поля субконто из результата виртуальной таблицы.
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции1", ОписаниеТиповЧисло);
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции2", ОписаниеТиповЧисло);
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции3", ОписаниеТиповЧисло);
	// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
	ДетальнаяКартаСубконто.Колонки.Добавить("СубконтоВиртуальнойТаблицыВПозиции4", ОписаниеТиповЧисло);
	// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика

	// Для субконто счета группы номера на счете в плане счетов совпадают с позициями псевдонимов в запросе.
	СвойстваСчетаГруппы = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетГруппа);
	
	ПозицииСубконтоСчетаГруппы = Новый Соответствие;
	Для Счетчик = 0 По НомераИспользуемыхСубконтоСчетаГруппы.ВГраница() Цикл
		НомерСубконтоСчетаГруппы = НомераИспользуемыхСубконтоСчетаГруппы[Счетчик];
		ПозицииСубконтоСчетаГруппы.Вставить(СвойстваСчетаГруппы["ВидСубконто" + НомерСубконтоСчетаГруппы], НомерСубконтоСчетаГруппы);
	КонецЦикла;

	// Расставляем субконто субсчетов в запросе.
	Для каждого СвойстваСубсчета Из СвойстваСчетов Цикл
	
		СтрокаКарты      = ДетальнаяКартаСубконто.Добавить();
		СтрокаКарты.Счет = СвойстваСубсчета.Счет;
	
		НомерСубконтоВиртуальнойТаблицы = 0;
	
		// Сначала виды субконто, совпадающие со счетом группой, на соответствующие позиции.
		Для НомерСубконтоСубсчета = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл

			ВидСубконтоСубсчета = СвойстваСубсчета["ВидСубконто" + НомерСубконтоСубсчета];
			Если НЕ ЗначениеЗаполнено(ВидСубконтоСубсчета) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСубконтоСчетаГруппы = ПозицииСубконтоСчетаГруппы[ВидСубконтоСубсчета];
			Если НЕ ЗначениеЗаполнено(НомерСубконтоСчетаГруппы) Тогда
				// У счета группы нет такого вида субконто, либо оно не выбрано в отчете.
				Продолжить;
			КонецЕсли;
			
			НомерСубконтоВиртуальнойТаблицы = НомерСубконтоВиртуальнойТаблицы + 1;
			СтрокаКарты["ВидСубконто" + НомерСубконтоВиртуальнойТаблицы]                 = ВидСубконтоСубсчета;
			СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконтоСчетаГруппы] = НомерСубконтоВиртуальнойТаблицы;
			
			// Очистим вид субконто в таблице выборки из плана счетов, чтобы в дальнейшем его не учитывать.
			СвойстваСубсчета["ВидСубконто" + НомерСубконтоСубсчета] = Неопределено;
			
		КонецЦикла;
		
		// Подставляем субконто субсчета с иным видом, но с тем же номером, что и у счета-группы.
		Для каждого НомерСубконто из НомераИспользуемыхСубконтоСчетаГруппы Цикл

			Если НомерСубконтоВиртуальнойТаблицы >= НомераИспользуемыхСубконтоСчетаГруппы.Количество() Тогда
				// Все субконто разместили.
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто]) Тогда
				// Позиция уже занята.
				Продолжить;
			КонецЕсли;
			
			ВидСубконтоСубсчета = СвойстваСубсчета["ВидСубконто" + НомерСубконто];
			Если Не ЗначениеЗаполнено(ВидСубконтоСубсчета) Тогда
				// У субсчета нет субконто с таким номером.
				Продолжить;
			КонецЕсли;
			
			НомерСубконтоВиртуальнойТаблицы = НомерСубконтоВиртуальнойТаблицы + 1;
			СтрокаКарты["ВидСубконто" + НомерСубконтоВиртуальнойТаблицы] = ВидСубконтоСубсчета;
			СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто] = НомерСубконтоВиртуальнойТаблицы;
			
			// Очистим вид субконто в таблице выборки из плана счетов, чтобы в дальнейшем его не учитывать.
			СвойстваСубсчета["ВидСубконто" + НомерСубконто] = Неопределено;
			
		КонецЦикла;
		
		// В остальные позиции в запросе подставляем оставшиеся субконто субсчета.
		Для каждого НомерСубконто из НомераИспользуемыхСубконтоСчетаГруппы Цикл

			Если ЗначениеЗаполнено(СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто]) Тогда
				Продолжить;
			КонецЕсли;
			Если НомерСубконтоВиртуальнойТаблицы >= НомераИспользуемыхСубконтоСчетаГруппы.Количество() Тогда
				// Все субконто разместили.
				Прервать;
			КонецЕсли;
			
			Для НомерСубконтоСубсчета = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
				
				ВидСубконтоСубсчета = СвойстваСубсчета["ВидСубконто" + НомерСубконтоСубсчета];
				Если ЗначениеЗаполнено(ВидСубконтоСубсчета) Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Если Не ЗначениеЗаполнено(ВидСубконтоСубсчета) Тогда
				// У субсчета нет других субконто.
				Прервать;
			КонецЕсли; 
			
			НомерСубконтоВиртуальнойТаблицы = НомерСубконтоВиртуальнойТаблицы + 1;
			СтрокаКарты["ВидСубконто" + НомерСубконтоВиртуальнойТаблицы] = ВидСубконтоСубсчета;
			СтрокаКарты["СубконтоВиртуальнойТаблицыВПозиции" + НомерСубконто] = НомерСубконтоВиртуальнойТаблицы;
			
			// Очистим вид субконто в таблице выборки из плана счетов, чтобы в дальнейшем его не учитывать.
			СвойстваСубсчета["ВидСубконто" + НомерСубконтоСубсчета] = Неопределено;
			
		КонецЦикла;
	
	КонецЦикла;
	
	// Упорядочиваем для объединения счетов с одинаковыми комбинациями субконто в один запрос к виртуальной таблице.
	// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
	//ИменаГруппируемыхКолонок = "ВидСубконто1, ВидСубконто2, ВидСубконто3,
	//	|СубконтоВиртуальнойТаблицыВПозиции1, СубконтоВиртуальнойТаблицыВПозиции2, СубконтоВиртуальнойТаблицыВПозиции3";
	ИменаГруппируемыхКолонок = "ВидСубконто1, ВидСубконто2, ВидСубконто3, ВидСубконто4,
		|СубконтоВиртуальнойТаблицыВПозиции1, СубконтоВиртуальнойТаблицыВПозиции2, СубконтоВиртуальнойТаблицыВПозиции3, СубконтоВиртуальнойТаблицыВПозиции4";	
	// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
	
	ДетальнаяКартаСубконто.Сортировать(ИменаГруппируемыхКолонок, Новый СравнениеЗначений);

	СвернутаяКартаСубконто = ДетальнаяКартаСубконто.СкопироватьКолонки(
	// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
	//	"СубконтоВиртуальнойТаблицыВПозиции1, СубконтоВиртуальнойТаблицыВПозиции2, СубконтоВиртуальнойТаблицыВПозиции3");
		"СубконтоВиртуальнойТаблицыВПозиции1, СубконтоВиртуальнойТаблицыВПозиции2, СубконтоВиртуальнойТаблицыВПозиции3, СубконтоВиртуальнойТаблицыВПозиции4");
	// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
	СвернутаяКартаСубконто.Колонки.Добавить("Счета",        Новый ОписаниеТипов("СписокЗначений"));
	СвернутаяКартаСубконто.Колонки.Добавить("ВидыСубконто", Новый ОписаниеТипов("СписокЗначений"));
	
	СтрокаСвернутойКарты = Неопределено;
	
	Для Индекс = 0 По ДетальнаяКартаСубконто.Количество() - 1 Цикл
		
		СтрокаДетальнойКарты = ДетальнаяКартаСубконто[Индекс];
		Если Индекс > 0 Тогда
			ПредыдущаяСтрокаДетальнойКарты = ДетальнаяКартаСубконто[Индекс - 1];
		КонецЕсли;
	                                                                       
		Если Индекс = 0
			ИЛИ СтрокаДетальнойКарты.ВидСубконто1 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто1
			ИЛИ СтрокаДетальнойКарты.ВидСубконто2 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто2
			ИЛИ СтрокаДетальнойКарты.ВидСубконто3 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто3
			// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
			ИЛИ СтрокаДетальнойКарты.ВидСубконто4 <> ПредыдущаяСтрокаДетальнойКарты.ВидСубконто4
			// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции1 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции1
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции2 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции2
			// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
			//ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции3 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции3 Тогда
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции3 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции3
			ИЛИ СтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции4 <> ПредыдущаяСтрокаДетальнойКарты.СубконтоВиртуальнойТаблицыВПозиции4 Тогда
			// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
			
			СтрокаСвернутойКарты = СвернутаяКартаСубконто.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСвернутойКарты, СтрокаДетальнойКарты);
			
			// ОАК_(Салтанов, 14.01.2020, Дополнительная аналитика
			//Для НомерСубконто = 1 По 3 Цикл
			Для НомерСубконто = 1 По 4 Цикл
			// ОАК_)Салтанов, 14.01.2020, Дополнительная аналитика
				ВидСубконто = СтрокаДетальнойКарты["ВидСубконто" + НомерСубконто];
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					СтрокаСвернутойКарты.ВидыСубконто.Добавить(ВидСубконто);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Накапливаем список счетов.
		СтрокаСвернутойКарты.Счета.Добавить(СтрокаДетальнойКарты.Счет);
	
	КонецЦикла;
	
	Возврат СвернутаяКартаСубконто;

КонецФункции
